# An example converted from Rust
 
##[derive(Debug)]
#struct Rectangle {
#    width: u32,
#    height: u32,
#}

#impl Rectangle {
#    // associated function
#    fn square(size: u32) -> Rectangle {
#        Rectangle { width: size, height: size, }
#    }

#    fn area(&self) -> u32 {
#        self.width * self.height
#    }

#    fn can_hold(&self, other: &Rectangle) -> bool {
#        self.width > other.width && self.height > other.height
#    }
#}

#fn main() {
#    let rect = Rectangle { width: 30, height: 50, };
#    let rect2 = Rectangle { width: 10, height: 40, };
#    let rect3 = Rectangle { width: 60, height: 45, };

#    println!(
#        "The area of the rectangle is {} square pixels.",
#        rect.area()
#    );
#    println!("Rect {:#?}", rect);

#    println!("Can rect hold rect2? {}", rect.can_hold(&rect2));
#    println!("Can rect hold rect3? {}", rect.can_hold(&rect3));

#    let square = Rectangle::square(3);
#    println!("square {:?}", square);
#}


# rectangle.gan
pub struct Rectangle:
  width int
  height int

pub fn area(r Rectangle) int:
  r.width * r.height

pub fn canHold?(r1, r2 Rectangle) bool:
  r1.width > r2.width and r1.height > r2.height

pub fn square(size int) Rectangle:
  Rectangle(width: size, height: size)


# main.gan
import Rectangle from rectangle 
 
val rect = Rectangle(width: 30, height: 50)
val rect2 = Rectangle(width: 10, height: 40)
val rect3 = Rectangle(width: 60, height: 45)

log("area", rectangle.area(rect))
log("Rect #{rect}")

log("Can rect hold rect2? #{Rectangle.canHold?(rect, rect2)}")
log("Can rect hold rect3? #{Rectangle.canHold?(rect, rect3)}")

val square = rectangle.square(3)
log("Square #{square}")
